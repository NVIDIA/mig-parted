// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reconfigure

import (
	"os/exec"
	"sync"
)

// Ensure, that commandRunnerMock does implement commandRunner.
// If this is not the case, regenerate this file with moq.
var _ commandRunner = &commandRunnerMock{}

// commandRunnerMock is a mock implementation of commandRunner.
//
//	func TestSomethingThatUsescommandRunner(t *testing.T) {
//
//		// make and configure a mocked commandRunner
//		mockedcommandRunner := &commandRunnerMock{
//			RunFunc: func(cmd *exec.Cmd) error {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedcommandRunner in code that requires commandRunner
//		// and then make assertions.
//
//	}
type commandRunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(cmd *exec.Cmd) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Cmd is the cmd argument value.
			Cmd *exec.Cmd
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *commandRunnerMock) Run(cmd *exec.Cmd) error {
	if mock.RunFunc == nil {
		panic("commandRunnerMock.RunFunc: method is nil but commandRunner.Run was just called")
	}
	callInfo := struct {
		Cmd *exec.Cmd
	}{
		Cmd: cmd,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(cmd)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedcommandRunner.RunCalls())
func (mock *commandRunnerMock) RunCalls() []struct {
	Cmd *exec.Cmd
} {
	var calls []struct {
		Cmd *exec.Cmd
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
