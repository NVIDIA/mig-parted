// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reconfigure

import (
	"sync"
)

// Ensure, that nodeLabellerMock does implement nodeLabeller.
// If this is not the case, regenerate this file with moq.
var _ nodeLabeller = &nodeLabellerMock{}

// nodeLabellerMock is a mock implementation of nodeLabeller.
//
//	func TestSomethingThatUsesnodeLabeller(t *testing.T) {
//
//		// make and configure a mocked nodeLabeller
//		mockednodeLabeller := &nodeLabellerMock{
//			getNodeLabelValueFunc: func(s string) (string, error) {
//				panic("mock out the getNodeLabelValue method")
//			},
//			setNodeLabelValueFunc: func(s1 string, s2 string) error {
//				panic("mock out the setNodeLabelValue method")
//			},
//		}
//
//		// use mockednodeLabeller in code that requires nodeLabeller
//		// and then make assertions.
//
//	}
type nodeLabellerMock struct {
	// getNodeLabelValueFunc mocks the getNodeLabelValue method.
	getNodeLabelValueFunc func(s string) (string, error)

	// setNodeLabelValueFunc mocks the setNodeLabelValue method.
	setNodeLabelValueFunc func(s1 string, s2 string) error

	// calls tracks calls to the methods.
	calls struct {
		// getNodeLabelValue holds details about calls to the getNodeLabelValue method.
		getNodeLabelValue []struct {
			// S is the s argument value.
			S string
		}
		// setNodeLabelValue holds details about calls to the setNodeLabelValue method.
		setNodeLabelValue []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
	}
	lockgetNodeLabelValue sync.RWMutex
	locksetNodeLabelValue sync.RWMutex
}

// getNodeLabelValue calls getNodeLabelValueFunc.
func (mock *nodeLabellerMock) getNodeLabelValue(s string) (string, error) {
	if mock.getNodeLabelValueFunc == nil {
		panic("nodeLabellerMock.getNodeLabelValueFunc: method is nil but nodeLabeller.getNodeLabelValue was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockgetNodeLabelValue.Lock()
	mock.calls.getNodeLabelValue = append(mock.calls.getNodeLabelValue, callInfo)
	mock.lockgetNodeLabelValue.Unlock()
	return mock.getNodeLabelValueFunc(s)
}

// getNodeLabelValueCalls gets all the calls that were made to getNodeLabelValue.
// Check the length with:
//
//	len(mockednodeLabeller.getNodeLabelValueCalls())
func (mock *nodeLabellerMock) getNodeLabelValueCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockgetNodeLabelValue.RLock()
	calls = mock.calls.getNodeLabelValue
	mock.lockgetNodeLabelValue.RUnlock()
	return calls
}

// setNodeLabelValue calls setNodeLabelValueFunc.
func (mock *nodeLabellerMock) setNodeLabelValue(s1 string, s2 string) error {
	if mock.setNodeLabelValueFunc == nil {
		panic("nodeLabellerMock.setNodeLabelValueFunc: method is nil but nodeLabeller.setNodeLabelValue was just called")
	}
	callInfo := struct {
		S1 string
		S2 string
	}{
		S1: s1,
		S2: s2,
	}
	mock.locksetNodeLabelValue.Lock()
	mock.calls.setNodeLabelValue = append(mock.calls.setNodeLabelValue, callInfo)
	mock.locksetNodeLabelValue.Unlock()
	return mock.setNodeLabelValueFunc(s1, s2)
}

// setNodeLabelValueCalls gets all the calls that were made to setNodeLabelValue.
// Check the length with:
//
//	len(mockednodeLabeller.setNodeLabelValueCalls())
func (mock *nodeLabellerMock) setNodeLabelValueCalls() []struct {
	S1 string
	S2 string
} {
	var calls []struct {
		S1 string
		S2 string
	}
	mock.locksetNodeLabelValue.RLock()
	calls = mock.calls.setNodeLabelValue
	mock.locksetNodeLabelValue.RUnlock()
	return calls
}
