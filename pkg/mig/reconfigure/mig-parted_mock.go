// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package reconfigure

import (
	"sync"
)

// Ensure, that migPartedMock does implement migParted.
// If this is not the case, regenerate this file with moq.
var _ migParted = &migPartedMock{}

// migPartedMock is a mock implementation of migParted.
//
//	func TestSomethingThatUsesmigParted(t *testing.T) {
//
//		// make and configure a mocked migParted
//		mockedmigParted := &migPartedMock{
//			applyMIGConfigFunc: func() error {
//				panic("mock out the applyMIGConfig method")
//			},
//			applyMIGModeOnlyFunc: func() error {
//				panic("mock out the applyMIGModeOnly method")
//			},
//			assertMIGConfigFunc: func() error {
//				panic("mock out the assertMIGConfig method")
//			},
//			assertMIGModeOnlyFunc: func() error {
//				panic("mock out the assertMIGModeOnly method")
//			},
//			assertValidMIGConfigFunc: func() error {
//				panic("mock out the assertValidMIGConfig method")
//			},
//		}
//
//		// use mockedmigParted in code that requires migParted
//		// and then make assertions.
//
//	}
type migPartedMock struct {
	// applyMIGConfigFunc mocks the applyMIGConfig method.
	applyMIGConfigFunc func() error

	// applyMIGModeOnlyFunc mocks the applyMIGModeOnly method.
	applyMIGModeOnlyFunc func() error

	// assertMIGConfigFunc mocks the assertMIGConfig method.
	assertMIGConfigFunc func() error

	// assertMIGModeOnlyFunc mocks the assertMIGModeOnly method.
	assertMIGModeOnlyFunc func() error

	// assertValidMIGConfigFunc mocks the assertValidMIGConfig method.
	assertValidMIGConfigFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// applyMIGConfig holds details about calls to the applyMIGConfig method.
		applyMIGConfig []struct {
		}
		// applyMIGModeOnly holds details about calls to the applyMIGModeOnly method.
		applyMIGModeOnly []struct {
		}
		// assertMIGConfig holds details about calls to the assertMIGConfig method.
		assertMIGConfig []struct {
		}
		// assertMIGModeOnly holds details about calls to the assertMIGModeOnly method.
		assertMIGModeOnly []struct {
		}
		// assertValidMIGConfig holds details about calls to the assertValidMIGConfig method.
		assertValidMIGConfig []struct {
		}
	}
	lockapplyMIGConfig       sync.RWMutex
	lockapplyMIGModeOnly     sync.RWMutex
	lockassertMIGConfig      sync.RWMutex
	lockassertMIGModeOnly    sync.RWMutex
	lockassertValidMIGConfig sync.RWMutex
}

// applyMIGConfig calls applyMIGConfigFunc.
func (mock *migPartedMock) applyMIGConfig() error {
	if mock.applyMIGConfigFunc == nil {
		panic("migPartedMock.applyMIGConfigFunc: method is nil but migParted.applyMIGConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockapplyMIGConfig.Lock()
	mock.calls.applyMIGConfig = append(mock.calls.applyMIGConfig, callInfo)
	mock.lockapplyMIGConfig.Unlock()
	return mock.applyMIGConfigFunc()
}

// applyMIGConfigCalls gets all the calls that were made to applyMIGConfig.
// Check the length with:
//
//	len(mockedmigParted.applyMIGConfigCalls())
func (mock *migPartedMock) applyMIGConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockapplyMIGConfig.RLock()
	calls = mock.calls.applyMIGConfig
	mock.lockapplyMIGConfig.RUnlock()
	return calls
}

// applyMIGModeOnly calls applyMIGModeOnlyFunc.
func (mock *migPartedMock) applyMIGModeOnly() error {
	if mock.applyMIGModeOnlyFunc == nil {
		panic("migPartedMock.applyMIGModeOnlyFunc: method is nil but migParted.applyMIGModeOnly was just called")
	}
	callInfo := struct {
	}{}
	mock.lockapplyMIGModeOnly.Lock()
	mock.calls.applyMIGModeOnly = append(mock.calls.applyMIGModeOnly, callInfo)
	mock.lockapplyMIGModeOnly.Unlock()
	return mock.applyMIGModeOnlyFunc()
}

// applyMIGModeOnlyCalls gets all the calls that were made to applyMIGModeOnly.
// Check the length with:
//
//	len(mockedmigParted.applyMIGModeOnlyCalls())
func (mock *migPartedMock) applyMIGModeOnlyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockapplyMIGModeOnly.RLock()
	calls = mock.calls.applyMIGModeOnly
	mock.lockapplyMIGModeOnly.RUnlock()
	return calls
}

// assertMIGConfig calls assertMIGConfigFunc.
func (mock *migPartedMock) assertMIGConfig() error {
	if mock.assertMIGConfigFunc == nil {
		panic("migPartedMock.assertMIGConfigFunc: method is nil but migParted.assertMIGConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockassertMIGConfig.Lock()
	mock.calls.assertMIGConfig = append(mock.calls.assertMIGConfig, callInfo)
	mock.lockassertMIGConfig.Unlock()
	return mock.assertMIGConfigFunc()
}

// assertMIGConfigCalls gets all the calls that were made to assertMIGConfig.
// Check the length with:
//
//	len(mockedmigParted.assertMIGConfigCalls())
func (mock *migPartedMock) assertMIGConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockassertMIGConfig.RLock()
	calls = mock.calls.assertMIGConfig
	mock.lockassertMIGConfig.RUnlock()
	return calls
}

// assertMIGModeOnly calls assertMIGModeOnlyFunc.
func (mock *migPartedMock) assertMIGModeOnly() error {
	if mock.assertMIGModeOnlyFunc == nil {
		panic("migPartedMock.assertMIGModeOnlyFunc: method is nil but migParted.assertMIGModeOnly was just called")
	}
	callInfo := struct {
	}{}
	mock.lockassertMIGModeOnly.Lock()
	mock.calls.assertMIGModeOnly = append(mock.calls.assertMIGModeOnly, callInfo)
	mock.lockassertMIGModeOnly.Unlock()
	return mock.assertMIGModeOnlyFunc()
}

// assertMIGModeOnlyCalls gets all the calls that were made to assertMIGModeOnly.
// Check the length with:
//
//	len(mockedmigParted.assertMIGModeOnlyCalls())
func (mock *migPartedMock) assertMIGModeOnlyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockassertMIGModeOnly.RLock()
	calls = mock.calls.assertMIGModeOnly
	mock.lockassertMIGModeOnly.RUnlock()
	return calls
}

// assertValidMIGConfig calls assertValidMIGConfigFunc.
func (mock *migPartedMock) assertValidMIGConfig() error {
	if mock.assertValidMIGConfigFunc == nil {
		panic("migPartedMock.assertValidMIGConfigFunc: method is nil but migParted.assertValidMIGConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockassertValidMIGConfig.Lock()
	mock.calls.assertValidMIGConfig = append(mock.calls.assertValidMIGConfig, callInfo)
	mock.lockassertValidMIGConfig.Unlock()
	return mock.assertValidMIGConfigFunc()
}

// assertValidMIGConfigCalls gets all the calls that were made to assertValidMIGConfig.
// Check the length with:
//
//	len(mockedmigParted.assertValidMIGConfigCalls())
func (mock *migPartedMock) assertValidMIGConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockassertValidMIGConfig.RLock()
	calls = mock.calls.assertValidMIGConfig
	mock.lockassertValidMIGConfig.RUnlock()
	return calls
}
