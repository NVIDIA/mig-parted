# Copyright 2024 NVIDIA CORPORATION
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Run this workflow on pull requests
name: image

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"
      - release-*

jobs:
  build:
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    runs-on: linux-${{ matrix.arch }}-cpu4
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v5
        name: Check out code
      - name: Calculate build vars
        id: vars
        run: |
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "LOWERCASE_REPO_OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | awk '{print tolower($0)}')" >> $GITHUB_ENV
          REPO_FULL_NAME="${{ github.event.pull_request.head.repo.full_name }}"
          echo "${REPO_FULL_NAME}"
          echo "LABEL_IMAGE_SOURCE=https://github.com/${REPO_FULL_NAME}" >> $GITHUB_ENV

          GENERATE_ARTIFACTS="false"
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            GENERATE_ARTIFACTS="false"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            GENERATE_ARTIFACTS="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            GENERATE_ARTIFACTS="true"
          fi

          echo "PUSH_ON_BUILD=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Go Proxy
        id: setup-go-proxy
        uses: nv-gha-runners/setup-artifactory-go-proxy@main
      - name: Build image
        env:
          IMAGE_NAME: ghcr.io/${LOWERCASE_REPO_OWNER}/k8s-mig-manager
          VERSION: ${COMMIT_SHORT_SHA}-${{ matrix.arch }}
          GOPROXY: ${{ steps.setup-go-proxy.outputs.goproxy-url }}
          DOCKER_BUILD_PLATFORM_OPTIONS: "--platform=linux/${{ matrix.arch }}"
        run: |
          echo "${VERSION}"
          make -f deployments/container/Makefile build

  create-manifest:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        name: Check out code
      - name: Calculate build vars
        id: vars
        run: |
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "LOWERCASE_REPO_OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | awk '{print tolower($0)}')" >> $GITHUB_ENV

          GENERATE_ARTIFACTS="false"
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            GENERATE_ARTIFACTS="false"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            GENERATE_ARTIFACTS="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            GENERATE_ARTIFACTS="true"
          fi

          echo "GENERATE_ARTIFACTS=${GENERATE_ARTIFACTS}" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        if: ${{ env.GENERATE_ARTIFACTS == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Manifest
        if: ${{ env.GENERATE_ARTIFACTS == 'true' }}
        env:
          MULTIARCH_IMAGE: ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-mig-manager:${{ env.COMMIT_SHORT_SHA }}
        run: |
          docker manifest create \
            ${MULTIARCH_IMAGE} \
            ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-mig-manager:${{ env.COMMIT_SHORT_SHA }}-amd64 \
            ghcr.io/${{ env.LOWERCASE_REPO_OWNER }}/k8s-mig-manager:${{ env.COMMIT_SHORT_SHA }}-arm64
          docker manifest push ${MULTIARCH_IMAGE}
